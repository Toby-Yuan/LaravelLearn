1. Routes資料夾
- Routes裡面放的是路由器, 其中web.php控制網頁顯示, api.php控制api

1.1 web.php 網頁控制
```
Route::get('/', function () {
   return view('home');
});
```
--> 表示 http://localhost:8888/LaravelLearn/laravelTest/public/ 顯示的是home.php這個view

```
Route::get('/', function () {
   return 'Hello World';
});
```
--> 顯示 Hello World 這個字串

```
Route::get('MyController', function () {
    return 'Hello World';
});
```
--> 表示 http://localhost:8888/LaravelLearn/laravelTest/public/MyController 顯示 Hello World 這個字串

1.2 路由器自帶參數
```
Route::get('abc/{id}', function ($id) {
    ...
});
```
--> 於 http://localhost:8888/LaravelLearn/laravelTest/public/abc/{id} 帶入 id 這個參數

```
Route::get('abc/{id}', function ($id = '123') {
    ...
});
```
--> 設定 id 這個參數的值是 123

1.3 限定參數內容
```
Route::get('abc/{id}', function ($id) {
    ...
})->where('id', '[0-9]+');
```
--> id 這個參數只能是數字

```
Route::get('abc/{txt}', function ($txt) {
    ...
})->where('txt', '[A-Za-z]+');
```
--> txt 這個參數只能是大小寫英文

```
Route::get('posts/{phone}/{email}', function ($phone, $email) {
    ...
})->where(['phone' => '[0-9]+', 'email' => '[A-Za-z]+']);
```
--> 可以同時限制兩個參數

1.4 路由器命名
```
Route::get('home', ['as' => 'index', function () {
    ...
}]);
```
--> 路由器可以用 as 命名, 方便URLs 呼喚

```
Route::get('home', [
    'as' => 'index', 'show' => 'UserController@myController'
]);
```
--> 也可以導向到指定 Controller 運作

1.5 POST 路由器
```
Route::get('testPost',function(){
    $csrf_token = csrf_token();
    $form = <<<FORM
        <form action="home" method="POST">
            <input type="hidden" name="_token" value="{$csrf_token}">
            <input type="submit" value="Submit"/>
        </form>
    FORM;
    return $form;
});

Route::post('home',function(){
    return "Hello World[POST]!";
});
```
--> 可以利用 form:POST 來跳轉到其他頁面


2. Controller 控制器
2.1 利用cmd建立
```
php artisan make:controller HomeController --resource
```
--> 輸入之後會在 app/Http/Controllers 裡面建立 HomeController (控制器名稱)
--> 裡面會有 index() -> 顯示資料, create() -> 新增資料, store() -> 就是新增一筆資料來進行"儲存"的這個動作, show() -> 與index不同在於 index是多筆 show是單筆, edit() -> 編輯頁面, udpate() -> 更新資料, destroy() -> 刪除資料


3. Models
3.1 確認DB連線
--> config/database.php
```
'host' => env('DB_HOST', '127.0.0.1'),
'port' => env('DB_PORT', '8889'),
'database' => env('DB_DATABASE', 'laravel'),
'username' => env('DB_USERNAME', 'root'),
'password' => env('DB_PASSWORD', 'root'),
'unix_socket' => env('DB_SOCKET', '/Applications/MAMP/tmp/mysql/mysql.sock'),
```
--> 以上是根據MAMP設定的

3.2 利用cmd建立
```
php artisan make:model Role
```
--> model 後面要加上資料表名稱 (此方法要先建立好資料表)
--> 會在 app/Models 裡面建立 Role.php (資料表名稱)

3.3 告知使用的資料表名稱
```
protected $table = 'Role';
```
--> 加在 class 裡面

3.4 取消在處理資料表時自動加上時間戳記
```
public $timestamps = false;
```
--> 不會出現 created_at 和 udpated_at 欄位


4. Authentication認證登入
4.1 利用cmd自動建立註冊登入系統
```
composer require laravel/ui
php artisan ui vue --auth
```

4.2 建立此專案的使用者 (在電腦的終端機執行)
4.2.1 先建立使用者
```
/Applications/MAMP/Library/bin/mysql -u root -p
```

4.2.2 帳號: sarahcheng, 密碼: www^0^Yoyo409
```
CREATE USER 'sarahcheng'@'localhost' IDENTIFIED WITH mysql_native_password BY 'www^0^Yoyo409';
```

4.2.3 提升此使用者的權利
```
GRANT ALL PRIVILEGES ON *.* TO 'sarahcheng'@'localhost';
```

4.2.4 登出
```
quit
```

4.3 建立目標資料表 
4.3.1 登入(在電腦的終端機執行)
```
mysql -u sarahcheng -pwww^0^Yoyo409
```

4.3.2 更改.env中的資料
```
DB_HOST=127.0.0.1
DB_PORT=8889
DB_DATABASE=laravel
DB_USERNAME=sarahcheng
DB_PASSWORD=www^0^Yoyo409
```

4.3.3 更改 config/database.php
```
'host' => env('DB_HOST', '127.0.0.1'),
'port' => env('DB_PORT', '8889'),
'database' => env('DB_DATABASE', 'laravel'),
'username' => env('DB_USERNAME', 'sarahcheng'),
'password' => env('DB_PASSWORD', 'www^0^Yoyo409'),
'unix_socket' => env('DB_SOCKET', '/Applications/MAMP/tmp/mysql/mysql.sock'),
'charset' => 'utf8',
'collation' => 'utf8_general_ci',
```

4.3.4 建立(此專案的終端機)
```
php artisan config:cache
php artisan migrate
```